apply plugin: 'org.springframework.boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

bootJar { enabled = false }
jar { enabled = true }

dependencies {
    compile "org.springframework.boot:spring-boot-starter-data-cassandra:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    compile "com.querydsl:querydsl-core:${queryDslVersion}"
    compile "com.querydsl:querydsl-jpa:${queryDslVersion}"
    compile "com.querydsl:querydsl-apt:${queryDslVersion}"

    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    compile 'org.postgresql:postgresql:42.2.5'
    compile 'org.modelmapper:modelmapper:2.3.4'

    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'com.google.guava:guava:22.0'


    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

flyway {
    configFiles = ["${file('src/main/resources/db/flyway-' + profile + '.properties').absolutePath}"]
}

def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}